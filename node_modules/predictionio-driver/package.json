{
  "name": "predictionio-driver",
  "version": "0.5.2",
  "description": "predictionio-driver is a PredictionIO 0.8+ client supporting both callback syntax and promise syntax",
  "license": "MIT",
  "author": {
    "name": "Asaf Yishai"
  },
  "homepage": "https://github.com/asafyish/predictionio-driver",
  "repository": {
    "type": "git",
    "url": "https://github.com/asafyish/predictionio-driver"
  },
  "bugs": {
    "url": "https://github.com/asafyish/predictionio-driver/issues"
  },
  "keywords": [
    "prediction",
    "predictionio",
    "driver",
    "machine learning"
  ],
  "dependencies": {
    "bluebird": "~3.5.0",
    "request": "~2.81.0",
    "lodash": "~3.0.0"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.11.2",
    "grunt-mocha-test": "~0.13.2",
    "jshint-stylish": "~2.2.1",
    "load-grunt-tasks": "~3.5.2",
    "time-grunt": "~1.4.0",
    "mocha": "~3.2.0",
    "chai": "~3.5.0",
    "chai-as-promised": "~6.0.0"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "**predictionio-driver** is a PredictionIO 0.9+ driver supporting both callback syntax and promise based syntax.\n\n## Installation\n\n    $ npm install predictionio-driver\n\n## Collecting Data\n\n```js\nvar predictionio = require('predictionio-driver');\n\n// accessKey is required for PredictionIO 0.9+\nvar client = new predictionio.Events({appId: 1, accessKey: 'your-access-key'});\n\n// Returns the server status\nclient.status().\n\tthen(function(status) {\n\t\tconsole.log(status); // Prints \"{status: 'alive'}\"\n\t});\n\n// Register a new user\nclient.createUser({uid: 'user-id'}).\n\tthen(function(result) {\n\t\tconsole.log(result); // Prints \"{eventId: 'something'}\"\n\t}).\n\tcatch(function(err) {\n\t\tconsole.error(err); // Something went wrong\n\t});\n\n// Register a new item\nclient.createItem({\n\tiid: 'item-id',\n\tproperties: {\n\t\titypes: ['type1']\n\t},\n\teventTime: new Date().toISOString()\n}).\n\tthen(function(result) {\n\t\tconsole.log(result); // Prints \"{eventId: 'something'}\"\n\t}).\n\tcatch(function(err) {\n\t\tconsole.error(err); // Something went wrong\n\t});\n\n// Register a new user-to-item action\nclient.createAction({\n\tevent: 'view',\n\tuid: 'user-id',\n\tiid: 'item-id',\n\teventTime: new Date().toISOString()\n}).\n\tthen(function(result) {\n\t\t\tconsole.log(result); // Prints \"{eventId: 'something'}\"\n\t}).\n\tcatch(function(err) {\n\t\tconsole.error(err); // Something went wrong\n\t});\n\n\n// Query an Event\nclient.getEvent(EventId).\n\tthen(function(result) {\n\t\t\tconsole.log(result);\n\t}).\n\tcatch(function(err) {\n\t\tconsole.error(err); // Something went wrong\n\t});\n\n\n// Query Events\nIn addition, the following optional parameters are supported:\n\nstartTime: time in ISO8601 format. Return events with eventTime >= startTime.\nuntilTime: time in ISO8601 format. Return events with eventTime < untilTime.\nentityType: String. The entityType. Return events for this entityType only.\nentityId: String. The entityId. Return events for this entityId only.\nlimit: Integer. The number of record events returned. Default is 20. -1 to get all.\nreversed: Boolean. Must be used with both entityType and entityId specified, returns events in reversed chronological order. Default is false.\n\nclient.getEvents({limit:10}).\n\tthen(function(result) {\n\t\t\tconsole.log(result);\n\t}).\n\tcatch(function(err) {\n\t\tconsole.error(err); // Something went wrong\n\t});\n\n\n// Remove an Event\nclient.deleteEvent(EventId).\n\tthen(function(result) {\n\t\t\tconsole.log(result); // Prints \"{eventId: 'something'}\"\n\t}).\n\tcatch(function(err) {\n\t\tconsole.error(err); // Something went wrong\n\t});\n\n\n\n```\n\n## Retrieving recommendations\n\n### Plain Version\n```js\nvar predictionio = require('predictionio-driver');\nvar engine = new predictionio.Engine({url: 'http://localhost'});\n\nengine.sendQuery({\n\tuid: 'user-id',\n\tn: 1\n}).\n\tthen(function (result) {\n\t\tconsole.log(result);\n\t});\n```\n\n### Disabling Strict SSL (for local self-signed certificated)\n```js\nvar predictionio = require('predictionio-driver');\nvar engine = new predictionio.Engine({url: 'https://localhost', strictSSL: false});\n\nengine.sendQuery({\n\tuid: 'user-id',\n\tn: 1\n}).\n\tthen(function (result) {\n\t\tconsole.log(result);\n\t});\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Asaf Yishai\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "predictionio-driver@0.5.2",
  "dist": {
    "shasum": "912fbd37f173e71344154808460a8e99f9a50bc4"
  },
  "_from": "predictionio-driver@",
  "_resolved": "https://registry.npmjs.org/predictionio-driver/-/predictionio-driver-0.5.2.tgz"
}
